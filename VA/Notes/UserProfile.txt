type UserProfile = {
  userId: string;
  ssn: string;
  firstName: string;
  lastName: string;
  dateOfBirth: Date;
  email: string;
  phoneNumber?: string;
  address?: Address;
  disabilityRating?: number;
  vaClaims: Claim[];
  appeals: Appeal[];
  documents: DocumentUpload[]; 
};

# Benefits Claim API

type Address = {
  street: string;
  city: string;
  state: string;
  zipCode: string;
};

type Appeal = {
  appealId: string;
  appealType: "legacyAppeal" | "higherLevelReview" | "supplementalClaim";
  appealStatus: "pending" | "decision_in_progress" | "bva_decision" | "denied" | "approved";
  appealDescription: string;
  agencyOfJurisdiction: "vba" | "vha" | "nca";
  programArea: "compensation" | "pension" | "medical";
  docketType: string;
  docketPosition: number;
  docketMonth: Date;
  appealIssues: AppealIssue[];
  appealEvidence: AppealEvidence[];
  appealAlerts: string[];
  appealEvents: AppealEvent[];
};

type AppealIssue = {
  issueId: string;
  description: string;
};

type AppealEvidence = {
  evidenceId: string;
  description: string;
  submittedDate: Date;
};

type AppealEvent = {
  eventType: string;
  date: Date;
  details: string;
};

type Claim = {
  claimId: string;
  veteranId: string;
  claimType: "disability" | "pension" | "education" | "housing" | "medical" | "other";
  claimStatus: "pending" | "under_review" | "completed" | "approved" | "denied";
  dateSubmitted: Date;
  claimDecision?: "approved" | "denied" | "pending";
  documentsSubmitted: ClaimDocument[];
  dateOfLastUpdate: Date;
};

type ClaimDocument = {
  documentId: string;
  documentType: "supportingEvidence" | "medicalRecords" | "statement" | "form";
  dateSubmitted: Date;
  description?: string;
};


# Benefits Docs API

type DocumentUpload = {
  requestId: number;
  participantId: number;
  fileNumber: string;
  claimId: number;
  docType: string;
  fileName: string;
  trackedItemIds?: number[]; // Optional field
  uploadStatus: "IN_PROGRESS" | "SUCCESS" | "FAILED";
  uploadedDateTime: Date;
};

type DocumentUploadResponse = {
  requestId: number;
  success: boolean;
};

type DocumentValidation = {
  docType: string;
  fileNumber: string;
  participantId: number;
  claimId: number;
};

type DocumentStatus = {
  requestId: number;
  status: "IN_PROGRESS" | "SUCCESS" | "FAILED";
  steps: WorkflowStep[];
  error?: WorkflowError; // Optional if there's an error
};

type WorkflowStep = {
  name: "CLAIMS_EVIDENCE" | "BENEFITS_GATEWAY_SERVICE";
  status: "NOT_STARTED" | "IN_PROGRESS" | "SUCCESS" | "FAILED";
  description: string;
};

type WorkflowError = {
  detail: string;
  step: "CLAIMS_EVIDENCE" | "BENEFITS_GATEWAY_SERVICE";
};
